<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:properties/db.properties</value>
		</property>
	</bean>	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="defaultAutoCommit" value="true" />
	</bean>
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="WEB-INF/spring/sqls/SqlMapConfig.xml" />
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSession" />
	</bean>
	
<!-- 	Transaction 처리를 위한 객체 -->
	<bean id="transactionManager" 
	      class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
<!-- 	첫번째 방법: @transactional을 해당 메서드에 선언한다. 
		proxy-target-class : 처리 대상 클래스가 인터페이스를 구현하지 않은 경우에도 처리해주겠다(true)
-->
<!-- 	<tx:annotation-driven transaction-manager="transactionManager"  -->
<!-- 	                      proxy-target-class="true" /> -->
	                      
<!-- 	두번째 방법: AOP개념으로 구현  (tx:advice, aop:config 태그 이용)-->
<!-- 	propagation="REQUIRED" 전파옵션: 트랜젝션이 실행되고 있으면 그냥 쓰던거 쓰고 없으면 생성해서 쓰겠다 -->
	<tx:advice transaction-manager="transactionManager" id="txAdvice">
		<tx:attributes>
			<tx:method name="replyBoard" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut expression=
		"execution(* com.hk.ansboard.service.*Service.*Board(..))" id="serviceTransaction"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceTransaction"/>
	</aop:config>
</beans>







